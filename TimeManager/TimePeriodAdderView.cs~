
using System;
using Gtk;
using Glade;
using System.Collections.Generic;

namespace TimeManager
{


	public class TimePeriodAdderView
	{

		private Boolean definingBlock = false;
		private Gtk.Entry startTimeEntry;
		private Gtk.Entry endTimeEntry;
		
		private Gtk.Button addBlockButton;
		private Gtk.Button cancelBlockButton;
		private Gtk.Button startBlockButton;
		
		private Gtk.TextView blockCommentTextview;
		private Gtk.ComboBoxEntry taskComboboxEntry;
		
		private List<Task> taskComboboxEntryItems = new List<Task>();
		
		public TimePeriodAdderView (Glade.XML gxml)
		{
			startTimeEntry = (Gtk.Entry) gxml.GetWidget("startTimestampEntry");
			endTimeEntry = (Gtk.Entry) gxml.GetWidget("endTimestampEntry");
			blockCommentTextview = (Gtk.TextView) gxml.GetWidget("blockCommentTextview");
			addBlockButton = (Gtk.Button) gxml.GetWidget("addBlockButton");
			cancelBlockButton = (Gtk.Button) gxml.GetWidget("cancelBlockButton");
			startBlockButton = (Gtk.Button) gxml.GetWidget("startBlockButton");
			taskCombobox = (Gtk.ComboBox) gxml.GetWidget("taskCombobox");
			
			notDefiningBlockSensitivity();
		}
		
		public Task getSelectedTask()
		{
			return taskComboboxItems[taskCombobox.Active];
		}
		
		public void setTaskComboBoxItems(List<Task> tasks)
		{
			taskCombobox.Clear();
			CellRendererText cell = new CellRendererText();
			taskCombobox.PackStart(cell, false);
			taskCombobox.AddAttribute(cell, "text", 0);
			taskComboboxItems = tasks;
			ListStore model = new ListStore(typeof (string));
			
			foreach (Task t in taskComboboxEntryItems) 
			{
				model.AppendValues(t.TaskName);
			} 
			taskComboboxEntry.Model = model;						
		}
		
		public void notDefineTimeBlock()
		{
			notDefiningBlockSensitivity();
		}
		
		public void defineTimeBlock()
		{
			definingBlockSensitivity();
		}
		
		public string getStartTimeString()
		{
			return startTimeEntry.Text;
		}
		
		public string getEndTimeString()
		{
			return endTimeEntry.Text;
		}
		
		public void setStartTimeString(String timestamp)
		{
			startTimeEntry.Text = timestamp;
		}
		
		public void setEndTimeString(String timestamp)
		{
			endTimeEntry.Text = timestamp;
		}
		
		public string getComment()
		{
			return blockCommentTextview.Buffer.Text;
		}
		
		
		
		private void notDefiningBlockSensitivity()
		{			
			startTimeEntry.Sensitive = true;
			endTimeEntry.Sensitive = false;
			endTimeEntry.Text = "";
			blockCommentTextview.Sensitive = false;
			blockCommentTextview.Buffer.Text = "";
			addBlockButton.Sensitive = false;
			cancelBlockButton.Sensitive = false;
			taskComboboxEntry.Sensitive = false;
		}
		
		private void definingBlockSensitivity()
		{
			startTimeEntry.Sensitive = false;
			endTimeEntry.Sensitive = true;
			blockCommentTextview.Sensitive = true;
			addBlockButton.Sensitive = true;
			cancelBlockButton.Sensitive = true;	
			taskComboboxEntry.Sensitive = true;
		}
		
	}
}
